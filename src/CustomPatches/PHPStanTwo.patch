--- project/vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php	(date 1286705410000)
+++ project/vendor/phpstan/phpstan/src/Command/ErrorFormatter/TableErrorFormatter.php	(date 1286705410000)
@@ -24,14 +24,6 @@
 	): int
 	{
 		if (!$analysisResult->hasErrors()) {
-			$style->success('No errors');
-			if ($analysisResult->isDefaultLevelUsed()) {
-				$style->note(sprintf(
-					'PHPStan is performing only the most basic checks. You can pass a higher rule level through the --%s option (the default and current level is %d) to analyse code more thoroughly.',
-					AnalyseCommand::OPTION_LEVEL,
-					AnalyseCommand::DEFAULT_LEVEL
-				));
-			}
 			return 0;
 		}

@@ -45,6 +37,7 @@
 			$fileErrors[$fileSpecificError->getFile()][] = $fileSpecificError;
 		}

+        $style->write(PHP_EOL);
 		foreach ($fileErrors as $file => $errors) {
 			$rows = [];
 			foreach ($errors as $error) {
@@ -54,9 +47,7 @@
 				];
 			}

-			$relativeFilePath = $this->relativePathHelper->getRelativePath($file);
-
-			$style->table(['Line', $relativeFilePath], $rows);
+			$style->table(['Line', $file], $rows);
 		}

 		if (count($analysisResult->getNotFileSpecificErrors()) > 0) {
@@ -65,7 +56,7 @@
 			}, $analysisResult->getNotFileSpecificErrors()));
 		}

-		$style->error(sprintf($analysisResult->getTotalErrorsCount() === 1 ? 'Found %d error' : 'Found %d errors', $analysisResult->getTotalErrorsCount()));
+        $style->write("\033[1A");
 		return 1;
 	}
